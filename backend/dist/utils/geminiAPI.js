"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = run;
const { GoogleGenerativeAI, } = require("@google/generative-ai");
const apiKey = process.env.GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);
const model = genAI.getGenerativeModel({
    model: "gemini-1.5-flash",
});
const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 500,
    responseMimeType: "text/plain",
};
function run(inputText) {
    return __awaiter(this, void 0, void 0, function* () {
        const chatSession = model.startChat({
            generationConfig,
            history: [
                {
                    role: "user",
                    parts: [
                        { text: "i am building a website related to therapist consultation. So for that i want to integrate this gemini ai. In this search i only want the result to be generated when the search term is related to mental health and wellness." },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "Integrating Gemini AI into your therapist consultation website to provide relevant search results for mental health and wellness topics is an excellent idea. Here's a breakdown of how you can achieve this, along with some key considerations:\n\n**1. Understanding Gemini AI**\n\n* **Gemini Pro:** This version is specifically designed for developers and offers advanced features like code generation, complex reasoning, and knowledge integration. It's ideal for a customized search experience.\n* **Gemini:** The free version is less powerful but still capable of understanding and generating human-like text. It might be sufficient for your initial implementation.\n\n**2. Setting Up Your Search System**\n\n* **Choose a Search Engine:**\n    * **Gemini AI API:** The preferred option for granular control and access to Gemini Pro's advanced capabilities.\n    * **Third-Party Search Services:** Services like Algolia or ElasticSearch can integrate with Gemini AI, providing a more comprehensive search experience with indexing and analytics.\n* **Frontend Integration:**\n    * Use JavaScript or a similar library to capture user search queries from a search bar on your website.\n    * Send the query to your chosen search engine (Gemini API, Algolia, etc.).\n\n**3. Filtering for Mental Health and Wellness**\n\n* **Keyword Filtering:**\n    * Create a list of keywords and phrases related to mental health and wellness (e.g., \"anxiety,\" \"depression,\" \"stress management,\" \"therapy,\" \"self-care\").\n    * When a user enters a query, check if it contains any of these keywords. If not, display an appropriate message (\"Please enter a query related to mental health and wellness\").\n* **Semantic Understanding:**\n    * Utilize Gemini AI's advanced language processing capabilities to analyze the user's query for underlying meaning.\n    * If the query is not explicitly about mental health, Gemini can still assess whether its intent is relevant to the topic (e.g., \"I'm feeling overwhelmed\" might imply stress).\n\n**4. Generating Results**\n\n* **Query the Gemini API:**\n    * Send the user's search query (after keyword filtering or semantic analysis) to the Gemini API.\n    * Specify relevant search parameters like topic (mental health) and desired output format (e.g., list of articles, summaries).\n* **Process and Display Results:**\n    * Receive the results from Gemini.\n    * Format and display them on your website in a user-friendly manner.\n    * Consider including:\n        * Article titles and links\n        * Summaries or snippets of relevant text\n        * Potential therapist profiles (if applicable)\n\n**5. Considerations and Enhancements**\n\n* **Privacy and Data Security:**\n    * Handle user data responsibly and securely.\n    * Be transparent about how you use user data.\n* **Safety and Accuracy:**\n    * Filter potentially harmful or inaccurate information.\n    * Provide users with reliable resources and contact information for mental health professionals.\n* **User Experience:**\n    * Make your search system intuitive and user-friendly.\n    * Offer clear and concise search results.\n    * Provide helpful suggestions for related search terms.\n* **Personalization:**\n    * Use user history and preferences to tailor search results.\n    * Allow users to save or bookmark relevant articles or therapists.\n\n**Example Code Snippet (Gemini API):**\n\n```javascript\nconst { Gemini } = require('@google-ai/generative-ai');\n\nconst model = new Gemini({\n  apiKey: 'YOUR_API_KEY',\n});\n\nasync function searchForMentalHealthInfo(query) {\n  // Filter or analyze query for relevance.\n\n  const response = await model.generateText({\n    text: query,\n    temperature: 0.7, // Adjust creativity level\n    top_k: 5, // Return top 5 results\n    top_p: 0.9, // Adjust diversity of results\n    max_output_tokens: 100, // Limit output length\n  });\n\n  // Process and display response.\n}\n\n// Call the function with a search query\nsearchForMentalHealthInfo('I feel anxious and stressed.');\n```\n\n**Remember:** This is just a starting point. The implementation will depend on your specific website's structure, design, and the features you want to include.\n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "but when i type wine. it returns search with wine. I dont want that. I only want to get the results based on mental health and wellness\n" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "You're absolutely right! That's a crucial point to address. Simply filtering by keywords like \"wine\" won't be enough to prevent unrelated results. Here's a more comprehensive approach to ensure your search only returns mental health and wellness results:\n\n**1. Advanced Keyword Filtering:**\n\n* **Expanded Keyword List:** Include a wider range of keywords related to mental health, including common synonyms, slang, and related concepts. Examples:\n    * **Mental Health:** anxiety, depression, stress, trauma, PTSD, bipolar, OCD, ADHD, therapy, counseling, psychiatrist, psychologist, self-care, mindfulness, meditation, coping skills, emotional regulation.\n    * **Wellness:**  well-being, happiness, resilience, emotional intelligence, healthy habits, sleep, nutrition, exercise, relationships, spirituality.\n* **Keyword Weighting:** Assign different weights to keywords based on their importance and relevance. For example, \"therapy\" should have a higher weight than \"wine.\"\n* **Phrase Matching:**  Look for specific phrases related to mental health and wellness. This helps distinguish between \"wine therapy\" (a real thing!) and simply \"wine.\"\n\n**2. Contextual Understanding:**\n\n* **Gemini AI's Contextual Analysis:** Utilize Gemini's powerful language processing capabilities to understand the user's intent even when they don't use explicit keywords. \n    * Analyze the user's query for:\n        * **Emotional Cues:**  \"I'm feeling down\" or \"I'm struggling with my emotions.\"\n        * **Problem Statements:** \"I need help with anxiety\" or \"I want to learn stress management techniques.\"\n        * **Search Intent:** \"Where can I find a therapist near me?\" or \"I need resources for coping with grief.\"\n* **Sentiment Analysis:** Analyze the user's query for positive, negative, or neutral sentiment. This can help identify queries that are likely related to mental health issues.\n\n**3. Search Result Filtering:**\n\n* **Gemini's Filtering Capabilities:** If you're using the Gemini API, leverage its filtering options:\n    * **Topic Filtering:**  Explicitly define the topic as \"mental health and wellness\" when you query the API.\n    * **Content Filtering:** Filter out results that contain specific keywords (like \"wine\") or that are not relevant to the topic.\n* **Post-Processing:**  If you need further filtering, you can process the results from Gemini before displaying them to the user. \n    * Use keyword matching, sentiment analysis, or other algorithms to remove irrelevant results.\n\n**Example (Using Gemini API & Keyword Filtering):**\n\n```javascript\nconst { Gemini } = require('@google-ai/generative-ai');\nconst mentalHealthKeywords = ['anxiety', 'depression', 'therapy', 'stress', 'self-care', ...]; // Your full keyword list\n\nconst model = new Gemini({\n  apiKey: 'YOUR_API_KEY',\n});\n\nasync function searchForMentalHealthInfo(query) {\n  // Keyword filtering:\n  const isRelevant = mentalHealthKeywords.some(keyword => query.includes(keyword));\n  if (!isRelevant) {\n    return \"Please enter a query related to mental health and wellness.\"\n  }\n\n  const response = await model.generateText({\n    text: query,\n    temperature: 0.7,\n    top_k: 5,\n    top_p: 0.9,\n    max_output_tokens: 100,\n    // Add filtering parameters to the API call if available.\n  });\n\n  // Process and display response, potentially filtering further.\n}\n\n// Call the function with a search query\nsearchForMentalHealthInfo('I feel stressed and need some help.');\n```\n\n**Key Takeaways:**\n\n* **Combine Techniques:** Employ a multi-pronged approach using keyword filtering, contextual understanding, and result filtering.\n* **Continuously Improve:**  Regularly review search results, update your keyword lists, and refine your filtering logic to ensure accuracy and relevance. \n* **User Feedback:** Ask users for feedback on search results. This will help you identify areas for improvement. \n\nBy implementing these strategies, you can ensure that your website's search results are focused on mental health and wellness, providing a more useful and relevant experience for your visitors. \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "when i enter Elon Musk it provides the result on that. I really dont want that. If the keyword is realted to mental health and wellness, then it should get me result. Otherwise, it should give other results." },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "You're right, that's a very important distinction to make! You want the search to be **strictly** focused on mental health and wellness, and only return results for those topics. Here's how you can achieve that, focusing on robust filtering and preventing unrelated results:\n\n**1. Strict Keyword Filtering:**\n\n* **Expanded and Targeted Keyword List:**  Create an extensive list of keywords and phrases directly related to mental health and wellness. This list should include:\n    * **Core Concepts:** anxiety, depression, therapy, counseling, stress, self-care, mindfulness, sleep, nutrition, exercise, addiction, trauma, grief, relationships, etc.\n    * **Specific Conditions:**  PTSD, OCD, ADHD, bipolar disorder, eating disorders, etc.\n    * **Treatment & Support:**  psychotherapy, medication, support groups, resources, etc.\n    * **Symptom-Based:**  feeling anxious, overwhelmed, sad, lonely, etc. \n* **Phrase Matching:**  Prioritize matching full phrases over individual words. This will prevent \"Elon Musk\" from triggering results based on the word \"Musk\" being in the list. \n\n**2. Intent-Based Filtering:**\n\n* **Gemini's Intent Understanding:**  Utilize Gemini's advanced language processing capabilities to assess the user's intent. \n    * **Look for Phrases:** \"I need help with...\", \"I'm feeling...\", \"Where can I find...\", \"I'm looking for resources on...\", etc.\n    * **Analyze User's Goal:** Is the user seeking information, support, resources, or professional help? \n* **Sentiment Analysis:**  Consider using sentiment analysis to identify queries that express emotional distress or a need for mental health support.\n\n**3. Search Query Validation:**\n\n* **Pre-Processing Check:**  Before sending the query to Gemini, use your keyword list and intent analysis to determine if the query is related to mental health and wellness.\n    * If the query doesn't meet the criteria, provide a clear message to the user: \"Please enter a query related to mental health and wellness.\"\n    * Offer suggestions or examples of relevant queries: \"For example, try 'how to manage stress' or 'find a therapist in my area.'\"\n\n**4. Post-Processing Result Filtering:**\n\n* **Gemini's Result Filtering (If Available):** If the Gemini API allows for topic-based filtering, leverage that feature to further restrict results.\n* **Custom Filtering:** If the Gemini API doesn't offer sufficient filtering, implement custom filtering logic after receiving results.\n    * Use keyword matching, sentiment analysis, or other techniques to identify and remove irrelevant results.\n\n**Example (Using Keyword Filtering & Intent Analysis):**\n\n```javascript\nconst { Gemini } = require('@google-ai/generative-ai');\nconst mentalHealthKeywords = ['anxiety', 'depression', 'therapy', 'stress', 'self-care', ...]; // Your full keyword list\nconst intentKeywords = ['help with', 'feeling', 'where to find', 'resources on']; // Keywords related to mental health intent\n\nconst model = new Gemini({\n  apiKey: 'YOUR_API_KEY',\n});\n\nasync function searchForMentalHealthInfo(query) {\n  // Keyword filtering:\n  const hasKeyword = mentalHealthKeywords.some(keyword => query.includes(keyword));\n  const hasIntent = intentKeywords.some(keyword => query.includes(keyword));\n\n  if (!hasKeyword || !hasIntent) {\n    return \"Please enter a query related to mental health and wellness. For example, try 'how to manage stress' or 'find a therapist near me.'\"\n  }\n\n  const response = await model.generateText({\n    text: query,\n    // ... (other Gemini API parameters)\n  });\n\n  // Process and display response, potentially filtering further.\n}\n\n// Call the function with a search query\nsearchForMentalHealthInfo('I feel stressed and need some help.');\n```\n\n**Key Takeaways:**\n\n* **Be Strict:**  Employ a rigorous filtering process to ensure only mental health and wellness content is returned.\n* **Prioritize Intent:** Understand the user's intended purpose and filter accordingly.\n* **Provide User Guidance:** Offer clear messages and suggestions to guide users towards relevant queries.\n* **Iterate and Test:**  Continuously evaluate your filtering rules and refine them based on user feedback and results.\n\nBy implementing these strategies, you can create a search experience that is highly specific to mental health and wellness, delivering the information and resources that users are looking for.\n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "const {\n    GoogleGenerativeAI,\n  } = require(\"@google/generative-ai\");\n  \n  const apiKey = process.env.GEMINI_API_KEY;\n  const genAI = new GoogleGenerativeAI(apiKey);\n  \n  const model = genAI.getGenerativeModel({\n    model: \"gemini-1.5-flash\",\n  });\n  \n  const generationConfig = {\n    temperature: 1,\n    topP: 0.95,\n    topK: 64,\n    maxOutputTokens: 8192,\n    responseMimeType: \"text/plain\",\n  };\n  \n  export async function run(inputText: string) {\n    const chatSession = model.startChat({\n      generationConfig,\n      history: [\n        {\n            role: \"user\",\n            parts: [\n              {text: \"i am building a website related to therapist consultation. So for that i want to integrate this gemini ai. In this search i only want the result to be generated when the search term is related to mental health and wellness.\"},\n            ],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {text: \"Integrating Gemini AI into your therapist consultation website to provide relevant search results for mental health and wellness topics is an excellent idea. Here's a breakdown of how you can achieve this, along with some key considerations:\\n\\n**1. Understanding Gemini AI**\\n\\n* **Gemini Pro:** This version is specifically designed for developers and offers advanced features like code generation, complex reasoning, and knowledge integration. It's ideal for a customized search experience.\\n* **Gemini:** The free version is less powerful but still capable of understanding and generating human-like text. It might be sufficient for your initial implementation.\\n\\n**2. Setting Up Your Search System**\\n\\n* **Choose a Search Engine:**\\n    * **Gemini AI API:** The preferred option for granular control and access to Gemini Pro's advanced capabilities.\\n    * **Third-Party Search Services:** Services like Algolia or ElasticSearch can integrate with Gemini AI, providing a more comprehensive search experience with indexing and analytics.\\n* **Frontend Integration:**\\n    * Use JavaScript or a similar library to capture user search queries from a search bar on your website.\\n    * Send the query to your chosen search engine (Gemini API, Algolia, etc.).\\n\\n**3. Filtering for Mental Health and Wellness**\\n\\n* **Keyword Filtering:**\\n    * Create a list of keywords and phrases related to mental health and wellness (e.g., \\\"anxiety,\\\" \\\"depression,\\\" \\\"stress management,\\\" \\\"therapy,\\\" \\\"self-care\\\").\\n    * When a user enters a query, check if it contains any of these keywords. If not, display an appropriate message (\\\"Please enter a query related to mental health and wellness\\\").\\n* **Semantic Understanding:**\\n    * Utilize Gemini AI's advanced language processing capabilities to analyze the user's query for underlying meaning.\\n    * If the query is not explicitly about mental health, Gemini can still assess whether its intent is relevant to the topic (e.g., \\\"I'm feeling overwhelmed\\\" might imply stress).\\n\\n**4. Generating Results**\\n\\n* **Query the Gemini API:**\\n    * Send the user's search query (after keyword filtering or semantic analysis) to the Gemini API.\\n    * Specify relevant search parameters like topic (mental health) and desired output format (e.g., list of articles, summaries).\\n* **Process and Display Results:**\\n    * Receive the results from Gemini.\\n    * Format and display them on your website in a user-friendly manner.\\n    * Consider including:\\n        * Article titles and links\\n        * Summaries or snippets of relevant text\\n        * Potential therapist profiles (if applicable)\\n\\n**5. Considerations and Enhancements**\\n\\n* **Privacy and Data Security:**\\n    * Handle user data responsibly and securely.\\n    * Be transparent about how you use user data.\\n* **Safety and Accuracy:**\\n    * Filter potentially harmful or inaccurate information.\\n    * Provide users with reliable resources and contact information for mental health professionals.\\n* **User Experience:**\\n    * Make your search system intuitive and user-friendly.\\n    * Offer clear and concise search results.\\n    * Provide helpful suggestions for related search terms.\\n* **Personalization:**\\n    * Use user history and preferences to tailor search results.\\n    * Allow users to save or bookmark relevant articles or therapists.\\n\\n**Example Code Snippet (Gemini API):**\\n\\n```javascript\\nconst { Gemini } = require('@google-ai/generative-ai');\\n\\nconst model = new Gemini({\\n  apiKey: 'YOUR_API_KEY',\\n});\\n\\nasync function searchForMentalHealthInfo(query) {\\n  // Filter or analyze query for relevance.\\n\\n  const response = await model.generateText({\\n    text: query,\\n    temperature: 0.7, // Adjust creativity level\\n    top_k: 5, // Return top 5 results\\n    top_p: 0.9, // Adjust diversity of results\\n    max_output_tokens: 100, // Limit output length\\n  });\\n\\n  // Process and display response.\\n}\\n\\n// Call the function with a search query\\nsearchForMentalHealthInfo('I feel anxious and stressed.');\\n```\\n\\n**Remember:** This is just a starting point. The implementation will depend on your specific website's structure, design, and the features you want to include.\\n\"},\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [\n              {text: \"but when i type wine. it returns search with wine. I dont want that. I only want to get the results based on mental health and wellness\\n\"},\n            ],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {text: \"You're absolutely right! That's a crucial point to address. Simply filtering by keywords like \\\"wine\\\" won't be enough to prevent unrelated results. Here's a more comprehensive approach to ensure your search only returns mental health and wellness results:\\n\\n**1. Advanced Keyword Filtering:**\\n\\n* **Expanded Keyword List:** Include a wider range of keywords related to mental health, including common synonyms, slang, and related concepts. Examples:\\n    * **Mental Health:** anxiety, depression, stress, trauma, PTSD, bipolar, OCD, ADHD, therapy, counseling, psychiatrist, psychologist, self-care, mindfulness, meditation, coping skills, emotional regulation.\\n    * **Wellness:**  well-being, happiness, resilience, emotional intelligence, healthy habits, sleep, nutrition, exercise, relationships, spirituality.\\n* **Keyword Weighting:** Assign different weights to keywords based on their importance and relevance. For example, \\\"therapy\\\" should have a higher weight than \\\"wine.\\\"\\n* **Phrase Matching:**  Look for specific phrases related to mental health and wellness. This helps distinguish between \\\"wine therapy\\\" (a real thing!) and simply \\\"wine.\\\"\\n\\n**2. Contextual Understanding:**\\n\\n* **Gemini AI's Contextual Analysis:** Utilize Gemini's powerful language processing capabilities to understand the user's intent even when they don't use explicit keywords. \\n    * Analyze the user's query for:\\n        * **Emotional Cues:**  \\\"I'm feeling down\\\" or \\\"I'm struggling with my emotions.\\\"\\n        * **Problem Statements:** \\\"I need help with anxiety\\\" or \\\"I want to learn stress management techniques.\\\"\\n        * **Search Intent:** \\\"Where can I find a therapist near me?\\\" or \\\"I need resources for coping with grief.\\\"\\n* **Sentiment Analysis:** Analyze the user's query for positive, negative, or neutral sentiment. This can help identify queries that are likely related to mental health issues.\\n\\n**3. Search Result Filtering:**\\n\\n* **Gemini's Filtering Capabilities:** If you're using the Gemini API, leverage its filtering options:\\n    * **Topic Filtering:**  Explicitly define the topic as \\\"mental health and wellness\\\" when you query the API.\\n    * **Content Filtering:** Filter out results that contain specific keywords (like \\\"wine\\\") or that are not relevant to the topic.\\n* **Post-Processing:**  If you need further filtering, you can process the results from Gemini before displaying them to the user. \\n    * Use keyword matching, sentiment analysis, or other algorithms to remove irrelevant results.\\n\\n**Example (Using Gemini API & Keyword Filtering):**\\n\\n```javascript\\nconst { Gemini } = require('@google-ai/generative-ai');\\nconst mentalHealthKeywords = ['anxiety', 'depression', 'therapy', 'stress', 'self-care', ...]; // Your full keyword list\\n\\nconst model = new Gemini({\\n  apiKey: 'YOUR_API_KEY',\\n});\\n\\nasync function searchForMentalHealthInfo(query) {\\n  // Keyword filtering:\\n  const isRelevant = mentalHealthKeywords.some(keyword => query.includes(keyword));\\n  if (!isRelevant) {\\n    return \\\"Please enter a query related to mental health and wellness.\\\"\\n  }\\n\\n  const response = await model.generateText({\\n    text: query,\\n    temperature: 0.7,\\n    top_k: 5,\\n    top_p: 0.9,\\n    max_output_tokens: 100,\\n    // Add filtering parameters to the API call if available.\\n  });\\n\\n  // Process and display response, potentially filtering further.\\n}\\n\\n// Call the function with a search query\\nsearchForMentalHealthInfo('I feel stressed and need some help.');\\n```\\n\\n**Key Takeaways:**\\n\\n* **Combine Techniques:** Employ a multi-pronged approach using keyword filtering, contextual understanding, and result filtering.\\n* **Continuously Improve:**  Regularly review search results, update your keyword lists, and refine your filtering logic to ensure accuracy and relevance. \\n* **User Feedback:** Ask users for feedback on search results. This will help you identify areas for improvement. \\n\\nBy implementing these strategies, you can ensure that your website's search results are focused on mental health and wellness, providing a more useful and relevant experience for your visitors. \\n\"},\n            ],\n          },\n          {\n            role: \"user\",\n            parts: [\n              {text: \"when i enter Elon Musk it provides the result on that. I really dont want that. If the keyword is realted to mental health and wellness, then it should get me result. Otherwise, it should give other results.\"},\n            ],\n          },\n          {\n            role: \"model\",\n            parts: [\n              {text: \"You're right, that's a very important distinction to make! You want the search to be **strictly** focused on mental health and wellness, and only return results for those topics. Here's how you can achieve that, focusing on robust filtering and preventing unrelated results:\\n\\n**1. Strict Keyword Filtering:**\\n\\n* **Expanded and Targeted Keyword List:**  Create an extensive list of keywords and phrases directly related to mental health and wellness. This list should include:\\n    * **Core Concepts:** anxiety, depression, therapy, counseling, stress, self-care, mindfulness, sleep, nutrition, exercise, addiction, trauma, grief, relationships, etc.\\n    * **Specific Conditions:**  PTSD, OCD, ADHD, bipolar disorder, eating disorders, etc.\\n    * **Treatment & Support:**  psychotherapy, medication, support groups, resources, etc.\\n    * **Symptom-Based:**  feeling anxious, overwhelmed, sad, lonely, etc. \\n* **Phrase Matching:**  Prioritize matching full phrases over individual words. This will prevent \\\"Elon Musk\\\" from triggering results based on the word \\\"Musk\\\" being in the list. \\n\\n**2. Intent-Based Filtering:**\\n\\n* **Gemini's Intent Understanding:**  Utilize Gemini's advanced language processing capabilities to assess the user's intent. \\n    * **Look for Phrases:** \\\"I need help with...\\\", \\\"I'm feeling...\\\", \\\"Where can I find...\\\", \\\"I'm looking for resources on...\\\", etc.\\n    * **Analyze User's Goal:** Is the user seeking information, support, resources, or professional help? \\n* **Sentiment Analysis:**  Consider using sentiment analysis to identify queries that express emotional distress or a need for mental health support.\\n\\n**3. Search Query Validation:**\\n\\n* **Pre-Processing Check:**  Before sending the query to Gemini, use your keyword list and intent analysis to determine if the query is related to mental health and wellness.\\n    * If the query doesn't meet the criteria, provide a clear message to the user: \\\"Please enter a query related to mental health and wellness.\\\"\\n    * Offer suggestions or examples of relevant queries: \\\"For example, try 'how to manage stress' or 'find a therapist in my area.'\\\"\\n\\n**4. Post-Processing Result Filtering:**\\n\\n* **Gemini's Result Filtering (If Available):** If the Gemini API allows for topic-based filtering, leverage that feature to further restrict results.\\n* **Custom Filtering:** If the Gemini API doesn't offer sufficient filtering, implement custom filtering logic after receiving results.\\n    * Use keyword matching, sentiment analysis, or other techniques to identify and remove irrelevant results.\\n\\n**Example (Using Keyword Filtering & Intent Analysis):**\\n\\n```javascript\\nconst { Gemini } = require('@google-ai/generative-ai');\\nconst mentalHealthKeywords = ['anxiety', 'depression', 'therapy', 'stress', 'self-care', ...]; // Your full keyword list\\nconst intentKeywords = ['help with', 'feeling', 'where to find', 'resources on']; // Keywords related to mental health intent\\n\\nconst model = new Gemini({\\n  apiKey: 'YOUR_API_KEY',\\n});\\n\\nasync function searchForMentalHealthInfo(query) {\\n  // Keyword filtering:\\n  const hasKeyword = mentalHealthKeywords.some(keyword => query.includes(keyword));\\n  const hasIntent = intentKeywords.some(keyword => query.includes(keyword));\\n\\n  if (!hasKeyword || !hasIntent) {\\n    return \\\"Please enter a query related to mental health and wellness. For example, try 'how to manage stress' or 'find a therapist near me.'\\\"\\n  }\\n\\n  const response = await model.generateText({\\n    text: query,\\n    // ... (other Gemini API parameters)\\n  });\\n\\n  // Process and display response, potentially filtering further.\\n}\\n\\n// Call the function with a search query\\nsearchForMentalHealthInfo('I feel stressed and need some help.');\\n```\\n\\n**Key Takeaways:**\\n\\n* **Be Strict:**  Employ a rigorous filtering process to ensure only mental health and wellness content is returned.\\n* **Prioritize Intent:** Understand the user's intended purpose and filter accordingly.\\n* **Provide User Guidance:** Offer clear messages and suggestions to guide users towards relevant queries.\\n* **Iterate and Test:**  Continuously evaluate your filtering rules and refine them based on user feedback and results.\\n\\nBy implementing these strategies, you can create a search experience that is highly specific to mental health and wellness, delivering the information and resources that users are looking for.\\n\"},\n            ],\n        },\n      ],\n    });\n  \n    const result = await chatSession.sendMessage(inputText);\n    console.log(result.response.text());\n    return result.response.text();\n  }\n  \ni want to return the result in short and accurate manner\n" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "You're on the right track! It seems like you're trying to build a robust mental health search feature using Gemini AI. Let's break down how to make the responses concise and accurate while staying within the mental health and wellness domain.\n\n**1. Tailored Prompting:**\n\n* **Direct the Model:**  Instead of a broad prompt, give Gemini a specific task related to mental health. For example, instead of \"Tell me about anxiety,\" try:\n    * \"Summarize the key symptoms of generalized anxiety disorder in a few sentences.\"\n    * \"Provide 3 coping strategies for managing stress.\"\n    * \"Explain the benefits of mindfulness meditation for mental well-being.\"\n* **Limit Length:** Set the `maxOutputTokens` to a smaller number (e.g., 500) to encourage concise responses.\n\n**2. Refined Filtering:**\n\n* **Keyword Blacklisting:** Add a list of words or phrases related to irrelevant topics that you want to explicitly exclude. For example, you might want to block terms related to:\n    * Specific people (Elon Musk)\n    * Non-mental health conditions\n    * Specific medications (unless it's in the context of mental health treatment)\n* **Intent Matching:**  Use a more refined set of keywords to identify queries related to mental health. Here's a sample:\n    * **Mental Health Conditions:** anxiety, depression, PTSD, OCD, bipolar disorder, etc.\n    * **Symptoms:** feeling anxious, stressed, sad, overwhelmed, etc.\n    * **Help-Seeking:** therapy, counseling, support groups, etc.\n    * **Self-Care:**  mindfulness, meditation, exercise, sleep, nutrition, etc. \n\n**3. Result Validation:**\n\n* **Fact-Checking:** If possible, use a fact-checking API or tool to verify the accuracy of the information provided by Gemini.\n* **Human Review:** Consider incorporating a human reviewer to check the responses for relevance and accuracy. This is especially important for providing information about sensitive topics like mental health.\n\n**4. Enhanced Response Structure:**\n\n* **Bullet Points or Lists:**  Format responses in a structured way (e.g., using bullet points or numbered lists) to improve readability and conciseness.\n* **Summaries and Key Takeaways:**  If the response is longer, include a concise summary or key takeaways at the beginning. \n\n**Example Code with Refined Filtering and Prompting:**\n\n```javascript\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n\nconst apiKey = process.env.GEMINI_API_KEY;\nconst genAI = new GoogleGenerativeAI(apiKey);\n\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\",\n});\n\nconst generationConfig = {\n  // ... (your existing config)\n  maxOutputTokens: 500,\n};\n\nconst mentalHealthKeywords = ['anxiety', 'depression', 'therapy', 'stress', 'self-care', ...]; // Your full keyword list\nconst intentKeywords = ['help with', 'feeling', 'where to find', 'resources on']; // Keywords related to mental health intent\nconst blacklistKeywords = ['Elon Musk', 'wine', 'political', 'specific medications']; // Words to exclude\n\nasync function searchForMentalHealthInfo(inputText) {\n  // 1. Keyword & Intent Filtering:\n  const hasKeyword = mentalHealthKeywords.some(keyword => inputText.includes(keyword));\n  const hasIntent = intentKeywords.some(keyword => inputText.includes(keyword));\n  const hasBlacklistWord = blacklistKeywords.some(keyword => inputText.includes(keyword));\n\n  if (!hasKeyword || !hasIntent || hasBlacklistWord) {\n    return \"Please enter a query related to mental health and wellness. For example, try 'how to manage anxiety' or 'find a therapist near me.'\"\n  }\n\n  // 2. Tailored Prompting:\n  let prompt;\n  if (inputText.includes('symptoms')) {\n    prompt = `Summarize the key symptoms of ${inputText.split('symptoms of')[1].trim()} in a few sentences.`;\n  } else if (inputText.includes('coping')) {\n    prompt = `Provide 3 coping strategies for managing ${inputText.split('coping with')[1].trim()}.`;\n  } else {\n    prompt = `Explain the benefits of ${inputText} for mental well-being.`;\n  }\n\n  const chatSession = model.startChat({\n    generationConfig,\n    history: [\n      // ... (your existing conversation history)\n    ],\n  });\n\n  const result = await chatSession.sendMessage(prompt);\n  return result.response.text();\n}\n\n// Call the function with a search query\nsearchForMentalHealthInfo('what are the symptoms of anxiety?');\n```\n\n**Additional Tips:**\n\n* **Experiment:** Try different prompt variations and filtering rules to find the optimal balance between conciseness and accuracy.\n* **User Feedback:** Gather user feedback to understand how well the responses meet their needs and identify areas for improvement.\n* **Contextual Awareness:**  If possible, use a conversational context to personalize the response based on previous interactions.\n\nBy combining these techniques, you can build a more intelligent and user-friendly mental health search experience using Gemini AI. \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "i want to trim the answers" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "Okay, I understand! You want to trim the answers generated by Gemini AI to make them even more concise. Here's how you can achieve this, combining the previous techniques with answer trimming:\n\n**1. Token-Based Trimming:**\n\n* **Token Limit:** Set a strict token limit for your Gemini API call. This will force the model to generate a response within a certain length. \n* **Token Counting:** Use a library to count the tokens in your response. This will help you determine if the response is within your desired length. \n* **Trimming by Token:** If the response exceeds your limit, trim it by removing tokens from the end of the response. \n\n**2. Sentence-Based Trimming:**\n\n* **Sentence Boundary Detection:**  Use a library to identify sentence boundaries in the response.\n* **Trimming by Sentences:** Remove sentences from the end of the response until you reach the desired length. This will help preserve the overall flow of the answer.\n\n**3. Content-Based Trimming:**\n\n* **Identify Key Points:**  Analyze the response for the most important or relevant information.\n* **Trimming Non-Essential Content:** Remove sentences or phrases that are not critical to the main message.\n\n**Example Code with Token-Based Trimming:**\n\n```javascript\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\nconst { countTokens } = require('token-count'); // Assuming you have a token counting library\n\nconst apiKey = process.env.GEMINI_API_KEY;\nconst genAI = new GoogleGenerativeAI(apiKey);\n\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\",\n});\n\nconst generationConfig = {\n  // ... (your existing config)\n  maxOutputTokens: 500, // Set a token limit for Gemini\n};\n\n// ... (Your keyword filtering and prompting code) \n\nasync function searchForMentalHealthInfo(inputText) {\n  // ... (Your filtering and prompting logic)\n\n  const result = await chatSession.sendMessage(prompt);\n  let responseText = result.response.text();\n\n  // 1. Token-Based Trimming:\n  const tokenLimit = 300; // Adjust as needed\n  const tokenCount = countTokens(responseText);\n  if (tokenCount > tokenLimit) {\n    const trimmedTokens = responseText.split(' ');\n    responseText = trimmedTokens.slice(0, tokenLimit).join(' '); \n  }\n\n  return responseText; \n}\n\n// ... (Call the function with a search query)\n```\n\n**Example Code with Sentence-Based Trimming:**\n\n```javascript\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\nconst { sentenceTokenizer } = require('nltk'); // Assuming you have a sentence tokenizer\n\nconst apiKey = process.env.GEMINI_API_KEY;\nconst genAI = new GoogleGenerativeAI(apiKey);\n\nconst model = genAI.getGenerativeModel({\n  model: \"gemini-1.5-flash\",\n});\n\nconst generationConfig = {\n  // ... (your existing config)\n};\n\n// ... (Your keyword filtering and prompting code) \n\nasync function searchForMentalHealthInfo(inputText) {\n  // ... (Your filtering and prompting logic)\n\n  const result = await chatSession.sendMessage(prompt);\n  let responseText = result.response.text();\n\n  // 2. Sentence-Based Trimming:\n  const sentenceLimit = 3; // Adjust as needed\n  const sentences = sentenceTokenizer(responseText);\n  if (sentences.length > sentenceLimit) {\n    responseText = sentences.slice(0, sentenceLimit).join(' '); \n  }\n\n  return responseText; \n}\n\n// ... (Call the function with a search query)\n```\n\n**Key Considerations:**\n\n* **Token Limit:**  Experiment with different token limits to find the right balance between conciseness and information retention. \n* **Sentence Length:**  If you use sentence-based trimming, consider the length of the trimmed sentences to ensure they are grammatically correct and make sense.\n* **Content Loss:**  Be aware that trimming can sometimes remove essential information. Carefully evaluate the trimmed responses to make sure they still convey the key points.\n\nBy implementing these trimming strategies, you can create even more concise and user-friendly search results for your mental health website.  Remember to test and refine your implementation based on user feedback and the specific needs of your website. \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "how can i make the response that is coming more readable and appealing" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "You're right, a readable and appealing response is key to a good user experience! Here's how you can enhance the readability and appeal of your Gemini AI responses for your mental health website:\n\n**1. Formatting and Styling:**\n\n* **Paragraphs:**  Break up the text into paragraphs with clear line breaks.\n* **Headers and Subheaders:**  Use headers (H2, H3) to organize the information and make it scannable. \n* **Bullet Points and Lists:**  Use bullet points or numbered lists to present multiple points or suggestions in a visually appealing way.\n* **Font Styles:**  Choose a clear, easy-to-read font. Consider using a larger font size for headings and a slightly smaller font size for body text.\n* **Color Contrast:**  Use appropriate color combinations for text and background to ensure readability and visual appeal.\n\n**2.  Human-Like Language:**\n\n* **Informal Tone:**   Use a friendly and approachable tone of voice. Avoid overly technical or academic language. \n* **Active Voice:**  Write in the active voice as much as possible (e.g., \"The therapist explained...\" instead of \"The explanation was given by the therapist\").\n* **Clear and Concise Sentences:**  Keep sentences relatively short and to the point. \n* **Avoid Jargon:**  Use everyday language that is easy for users to understand. If you need to use technical terms, explain them clearly.\n\n**3.  Additional Enhancements:**\n\n* **Visual Aids:**  Consider incorporating visual aids like images, infographics, or videos to enhance the information and make it more engaging.\n* **Examples and Case Studies:**  If appropriate, provide examples or case studies to illustrate key points or concepts.\n* **Call to Action:**  Include clear calls to action to encourage users to take the next step (e.g., \"Learn more about anxiety treatment,\" \"Contact a therapist near you\"). \n\n**4.  Example with Formatting and Styling:**\n\n```html\n<h2>Coping Strategies for Stress</h2>\n\n<p>Stress is a normal part of life, but excessive stress can have a negative impact on your mental and physical health. Here are some effective coping strategies you can try:</p>\n\n<ul>\n  <li><strong>Mindfulness Meditation:</strong>  Focus on the present moment without judgment. This can help reduce anxiety and promote relaxation.</li>\n  <li><strong>Exercise:</strong> Physical activity releases endorphins, which have mood-boosting effects. Aim for at least 30 minutes of moderate-intensity exercise most days of the week.</li>\n  <li><strong>Deep Breathing Exercises:</strong> Practice deep, slow breaths to calm your nervous system and reduce stress hormones.</li>\n</ul>\n\n<p>If you're struggling to manage stress, consider reaching out to a mental health professional for support. They can help you develop personalized coping strategies and address any underlying issues.</p>\n```\n\n**5.  Integration with Website Design:**\n\n* **Consistency:**  Ensure that the formatting and style of the Gemini responses are consistent with the overall design and branding of your website.\n* **Responsive Design:**  Make sure the responses are responsive and display correctly across different devices (desktops, tablets, mobile phones).\n\n**Key Takeaways:**\n\n* **Focus on Readability:** Make the text easy to scan, understand, and digest.\n* **Use a User-Friendly Tone:**  Be conversational and approachable. \n* **Enhance with Visuals:**  Consider incorporating visuals to make the information more engaging.\n* **Integrate with Your Website:**  Ensure consistency with your website's overall design and branding.\n\nBy applying these strategies, you can create a more enjoyable and user-friendly experience for your website visitors while providing them with valuable information about mental health and wellness. \n" },
                    ],
                },
                {
                    role: "user",
                    parts: [
                        { text: "i also want to remove ** and * from the response. instead seperate it in next line" },
                    ],
                },
                {
                    role: "model",
                    parts: [
                        { text: "You're right, those double asterisks and single asterisk can disrupt the flow of the text. Here's how you can remove them and insert line breaks instead using JavaScript:\n\n```javascript\nconst { GoogleGenerativeAI } = require(\"@google/generative-ai\");\n// ... (Your other code)\n\nasync function searchForMentalHealthInfo(inputText) {\n  // ... (Your filtering, prompting, and trimming logic)\n\n  const result = await chatSession.sendMessage(prompt);\n  let responseText = result.response.text();\n\n  // Remove triple asterisks and insert line breaks:\n  responseText = responseText.replace(/\\*\\*\\*/g, '\\n\\n');\n\n  return responseText; \n}\n\n// ... (Call the function with a search query)\n```\n\n**Explanation:**\n\n* **`replace(/\\*\\*\\*/g, '\\n\\n')`:** This code uses JavaScript's `replace` method to find all occurrences of `***` in the `responseText` and replace them with `\\n\\n`, which inserts two line breaks.\n* **`g` flag:**  The `g` flag ensures that *all* occurrences of `***` are replaced, not just the first one.\n\n**Example:**\n\nIf your Gemini response contains:\n\n```\nThis is a text with *** some *** triple asterisks.\n```\n\nAfter applying the `replace` method, it will become:\n\n```\nThis is a text with \n\n some \n\n triple asterisks.\n```\n\n**Important Considerations:**\n\n* **HTML Formatting:** If you're displaying the response within an HTML context, you might need to adjust the line breaks to `<br>` tags for proper rendering.\n* **Styling:**  Make sure to style the line breaks (e.g., with CSS) to maintain the visual flow of the response.\n\nThis code snippet will neatly separate your text sections, making the responses more readable and visually appealing! \n" },
                    ],
                },
            ],
        });
        const result = yield chatSession.sendMessage(inputText);
        console.log(result.response.text());
        return result.response.text().trim();
    });
}
